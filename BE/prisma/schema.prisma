generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Members {
  id            String      @id @default(uuid())
  name          String
  email         String      @unique
  phone         String      @unique
  status        Boolean     @default(false)
  verified      Verified?
  profile       Profile?
  posts         Post[]
  networks      Network[]   @relation("MemberNetworks") // Many-to-many relationship
  Cluster       Cluster[]   @relation("MemberClusters")
  likes         Likes[]
  shares        Share[]
  comments      Comments[]
  chats         Chat[]       @relation("MemberChats")
  chatRequests  ChatRequest[]  @relation("MemberRequests")
  sentRequests  ChatRequest[]  @relation("MemberChatRequest")
  news          News[]
  poll          Poll[]   @relation("pollmember")
  rating        Rating[] @relation("MemberRating")
  ratingvotes   Rating[] @relation("MemberVoteRating")
  event         Events[]
  permotions    Promotion[]
  pollvotes     Poll[]       @relation("MembersPoll")
  views         Views[]
  stories       Story[]
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  savedPosts    SavedPost[]
  sentNotifications     Notification[] @relation("SentNotifications")
  receivedNotifications Notification[] @relation("ReceivedNotifications")
  @@map("Members")
}

model Profile {
  id        String      @id @default(uuid())
  img       String?
  coverImg  String?
  member    Members     @relation(fields: [memberId], references: [id], onDelete: Cascade) // Fixed here
  memberId  String      @unique
  bio       String?
  address   String?
  city      String?
  state     String?
  country   String?
  pincode   Int?
  dob       DateTime?
  gender    Gender?
  details   Details?
  @@map("Profile")
}
 

model Details{
  id                   String            @id     @default(uuid())
  profile              Profile          @relation(fields: [profileId],references: [id],onDelete: Cascade)
  profileId            String @unique
  education            Education[]
  hobbie               String[]          @default([])
  interests            String[]          @default([])
  overview             String?
  instagram            String?
  website              String?
  facebook             String?
  linkedin             String?
  github               String?
  relationStatus       RelationStatus?
  work                 Work[]
  skills               String[]          @default([])
  @@map("Details")
}

model Education{
  id                    String            @id     @default(uuid())
  details               Details?           @relation(fields: [detailsid],references: [id],onDelete: Cascade)
  detailsid             String?            @unique
  degree                String?
  college               String?
  start_date            DateTime?
}
model Work{
  id                    String            @id     @default(uuid())
  details               Details?           @relation(fields: [detailsid],references: [id],onDelete: Cascade)
  detailsid             String ?           @unique
  oragnasation          String?
  position              String?
  start_date            DateTime?
  end_date              DateTime?
  description           String?
  @@map("Work")
}
 model Verified{
  id                   String            @id     @default(uuid())
  adharno              String               @unique
  adharimg             String  
  enrollmentno         String            @unique
  enrollmentimg        String
  realphoto            String
  member               Members           @relation(fields: [memberId],references: [id],onDelete: Cascade)
  memberId             String            @unique
  verified             Boolean           @default(false)
  verified_at          DateTime          @default(now())
  @@map("Verified")

 }
 model Auth {
  id                    String             @id @default(uuid())
  email                 String             @unique
  password              String
  role                  UserRole           @default(MEMBER) 
  userId                String?
  @@map("Auth")
}


model Otpverify {
  id                     String             @id     @default(uuid())
  email                  String             @unique
  otp                    String?
  password               String
  expiresAt              DateTime?          @default(now())
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  @@map("Otpverify")
}
model forgotPassword{
  id           String      @id     @default(uuid())
  email        String      @unique
  otp          String?
  expiresAt    DateTime    @default(now())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
model Network {
  id           String       @id @default(uuid())
  name         String       @unique
  verified     Boolean      @default(false)
  address      String[]
  city         String
  state        String
  country      String
  pincode      String
  website      String
  socialmedia  String[]
  about        String
  logo         String?
  cover        String?
  followers    String
  posts        Post[]
  members      Members[]     @relation("MemberNetworks") // Many-to-many relationship
  cluster      Cluster[]
  likes        Likes[]
  shares       Share[]
  comments     Comments[]  
  stories      Story[]
  explore      Explore?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  savedBy      SavedPost[]
  @@map("Network")
}


model Cluster{
  id           String       @id @default(uuid())
  Members      Members[]    @relation("MemberClusters")
  name         String       @unique
  verified     Boolean      @default(false)
  website      String
  socialmedia  String[]
  about        String
  logo         String?
  cover        String?
  followers    Int
  posts        Post[]
  networkId    String 
  network      Network       @relation(fields: [networkId],references: [id],onDelete: Cascade)
  likes        Likes[] 
  shares       Share[]
  comments     Comments[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  savedBy      SavedPost[]
  @@map("Cluster")
}
model Post {
  id           String         @id @default(uuid())
  description  String?
  image        String?
  video        String?
  hlsUrl       String?       // Added HLS URL for adaptive streaming
  thumbnail    String?       // Added thumbnail URL for video preview
  likes        Likes[]
  comments     Comments[]
  shares       Share[]
  memberId     String
  member       Members       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  networkId    String?
  network      Network?      @relation(fields: [networkId], references: [id], onDelete: Cascade)
  clusterId    String?
  cluster      Cluster?      @relation(fields: [clusterId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  savedBy      SavedPost[]
}

model Likes{
  id           String         @id @default(uuid())
  memberId     String
  member       Members        @relation(fields: [memberId],references: [id],onDelete: Cascade)
  postId       String?
  post         Post?          @relation(fields: [postId],references: [id])
  network      Network?       @relation(fields: [networkId],references: [id])
  networkId    String?
  cluster      Cluster?       @relation(fields: [clusterId],references: [id])
  clusterId    String?
  comments     Comments?      @relation(fields: [commentId],references: [id])
  commentId    String?
  storyId       String?
  story        Story? @relation(fields: [storyId],references: [id])
  exploreId    String?
  explore      Explore?       @relation(fields: [exploreId],references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}
model Share{
  id           String        @id @default(uuid())
  memberId     String
  member       Members       @relation(fields: [memberId],references: [id],onDelete: Cascade)
  postId       String?
  post         Post?         @relation(fields: [postId],references: [id])
  network      Network?      @relation(fields: [networkId],references: [id])
  networkId    String?
  cluster      Cluster?      @relation(fields: [clusterId],references: [id])
  clusterId    String?
  exploreId    String
  explore      Explore?      @relation(fields: [exploreId],references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}
model Comments{
  id           String        @id @default(uuid())
  content      String
  memberId     String
  likes        Likes[]
  member       Members       @relation(fields: [memberId],references: [id],onDelete: Cascade)
  postId       String?
  post         Post?         @relation(fields: [postId],references: [id],onDelete: Cascade)
  network      Network?      @relation(fields: [networkId],references: [id],onDelete: Cascade)
  networkId    String?
  cluster      Cluster?      @relation(fields: [clusterId],references: [id],onDelete: Cascade)
  clusterId    String?
  exploreId    String?
  explore      Explore?      @relation(fields: [exploreId],references: [id],onDelete: Cascade)
  parentId     String?
  parent       Comments?     @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies      Comments[]    @relation("CommentReplies")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([parentId])
  @@map("Comments")
}

model Explore{
  id            String        @id @default(uuid())
  network       Network       @relation(fields: [networkId],references: [id],onDelete: Cascade)
  networkId     String        @unique
  news          News[]
  events        Events[]
  poll          Poll[]
  rating        Rating[]
  promotion     Promotion[]
  likes         Likes[]
  comments      Comments[]
  share         Share[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  @@map("Explore")
}
  
model News{
  id           String         @id @default(uuid())
  title        String
  content      String
  image        String
  author       String
  category     Category      @default(news)
  exploreId    String        
  explore      Explore       @relation(fields: [exploreId],references: [id],onDelete: Cascade)
  memberId     String
  member       Members       @relation(fields: [memberId],references: [id], onDelete: Cascade)
  expireAt     DateTime      
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}
model Events{
  id           String        @id @default(uuid())
  title        String
  description  String
  location     String?
  startDate    DateTime?
  endDate      DateTime?
  attendees    Int?
  image        String[]
  author       String[]
  category     Category      @default(events)
  exploreId    String?
  explore      Explore?      @relation(fields: [exploreId],references: [id])
  memberId     String
  member       Members       @relation(fields: [memberId],references: [id], onDelete: Cascade)
  expireAt     DateTime 
  createdAt    DateTime      @default(now())
}

model Poll{
  id           String        @id @default(uuid())
  question     String
  options      String[]
  votes        Int[]
  totalvotes   Int
  category     Category      @default(poll)
  memberId     String
  member       Members       @relation("pollmember",fields: [memberId],references: [id], onDelete: Cascade)
  exploreId    String?
  explore      Explore?      @relation(fields: [exploreId],references: [id], onDelete: Cascade)
  voter        Members[]       @relation("MembersPoll")
  expireAt     DateTime 
  createdAt    DateTime      @default(now())
}
model Rating{
  id           String        @id @default(uuid())
  title        String
  description  String
  image        String?
  rating       Int[]         @default([0,0,0,0,0])
  totalrating  Int
  category     Category      @default(rating)
  memberId     String
  linkUrl      String?
  member       Members       @relation("MemberRating",fields: [memberId],references: [id], onDelete: Cascade)
  exploreId    String?
  explore      Explore?      @relation(fields: [exploreId],references: [id], onDelete: Cascade)
  voter        Members[]       @relation("MemberVoteRating")
  expireAt     DateTime 
  createdAt    DateTime      @default(now())
}

model Promotion{
  id           String        @id @default(uuid())
  text         String
  textColor    String
  link         String?
  backgroundColor       String
  exploreId    String?
  category     Category      @default(promotion)
  explore      Explore?      @relation(fields: [exploreId],references: [id])
  memberId     String
  member       Members       @relation(fields: [memberId],references: [id], onDelete: Cascade)
  expireAt     DateTime 
  createdAt    DateTime      @default(now())

}
model Message{
  id               String        @id @default(uuid())
  senderId         String
  receiverId       String
  file             String?
  message          String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}
model Chat{
  id               String        @id @default(uuid())
  memberId         String 
  members          Members[]     @relation("MemberChats")
  createdAt        DateTime      @default(now())
  
}
model ChatRequest {
  id        String   @id @default(uuid())
  members   Members  @relation("MemberRequests", fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String
  sender    Members  @relation("MemberChatRequest", fields: [senderId], references: [id])
  senderId  String
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Story {
  id        String     @id @default(uuid())
  title     String
  content   String?
  mediaUrl  String?    // Stores Image/Video URL
  mediaType MediaType  // Enum: 'image' | 'video'
  duration  Int?       // Video duration in seconds
  hlsUrl    String?    // HLS Streaming URL
  thumbnail String?    // Video Thumbnail
  status    StoryStatus @default(active)
  memberId  String
  member    Members    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  networkId String?
  network   Network?   @relation(fields: [networkId], references: [id], onDelete: Cascade)
  likes     Likes[]
  views     Views[]
  createdAt DateTime   @default(now())
  expiresAt DateTime   // Expire after 24 hours
}

model Views{
  id           String        @id @default(uuid())
  memberId     String
  member       Members       @relation(fields: [memberId],references: [id], onDelete: Cascade)
  storyId      String?
  story        Story?         @relation(fields: [storyId],references: [id])
  createdAt    DateTime @default(now())

}
enum UserRole{
  MEMBER
  ADMIN
  MODERATOR
  SUPER_ADMIN
}
enum Gender{
  male
  female
  notdisclosed
  other
}
 enum Category{
  news
  events
  poll
  rating
  promotion
  }

enum MediaType {
  IMAGE
  VIDEO
}

enum StoryStatus {
  active
  expired
  deleted
}

enum RelationStatus{
  SINGLE
  MARRIED
  DIVORCED
  COMPLICATED
  INTERESTED
  NOTINTERESTED
}

model SavedPost {
  id           String      @id @default(uuid())
  memberId     String
  member       Members     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  postId       String?
  post         Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  networkId    String?
  network      Network?    @relation(fields: [networkId], references: [id], onDelete: Cascade)
  clusterId    String?
  cluster      Cluster?    @relation(fields: [clusterId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([memberId, postId, networkId, clusterId])
  @@map("SavedPost")
}

model Notification {
  id          String      @id @default(uuid())
  type        NotificationType
  senderId    String
  receiverId  String
  content     String
  targetId    String?     // ID of the related item (post, comment, etc.)
  targetType  String?     // Type of the target (post, comment, etc.)
  isRead      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  sender      Members     @relation("SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    Members     @relation("ReceivedNotifications", fields: [receiverId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  LIKE
  COMMENT
  CHAT_REQUEST
  MESSAGE
  FOLLOW
  MENTION
}

model SuperAdmin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("super_admins")
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(ADMIN)
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}


