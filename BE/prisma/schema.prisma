generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Members {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  phone      String      @unique
  status     Boolean     @default(false)
  verified   Verified?
  profile    Profile?
  posts      Post[]
  networks   Network[]   @relation("MemberNetworks") // Many-to-many relationship
  Cluster    Cluster[]   @relation("MemberClusters")
  likes      Likes[]
  shares     Share[]
  comments   Comments[]
  chats      Chat[]       @relation("MemberChats")
  chatRequests  ChatRequest[]  @relation("MemberRequests")
  sentRequests  ChatRequest[]  @relation("MemberChatRequest")
  news          News[]
  openion       Opinion[]
  event         Events[]
  permotions    Promotion[]

  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  @@map("Members")
}

model Profile {
  id        String      @id @default(uuid())
  img       String?
  coverImg  String?
  member    Members     @relation(fields: [memberId], references: [id], onDelete: Cascade) // Fixed here
  memberId  String      @unique
  bio       String?
  address   String?
  city      String?
  state     String?
  country   String?
  pincode   Int?
  dob       DateTime?
  gender    Gender?
  details   Details?
  @@map("Profile")
}
 

model Details{
  id                   String            @id     @default(uuid())
  profile              Profile          @relation(fields: [profileId],references: [id],onDelete: Cascade)
  profileId            String @unique
  education            Education[]
  hobbie               String[]          @default([])
  interests            String[]          @default([])
  overview             String?
  instagram            String?
  twitter              String?
  facebook             String?
  linkedin             String?
  github               String?
  work                 Work[]
  skills               String[]          @default([])
  @@map("Details")
}

model Education{
  id                    String            @id     @default(uuid())
  details               Details?           @relation(fields: [detailsid],references: [id],onDelete: Cascade)
  detailsid             String?            @unique
  degree                String?
  college               String?
  start_date            DateTime?
}
model Work{
  id                    String            @id     @default(uuid())
  details               Details?           @relation(fields: [detailsid],references: [id],onDelete: Cascade)
  detailsid             String ?           @unique
  oragnasation          String?
  position              String?
  start_date            DateTime?
  end_date              DateTime?
  description           String?
  @@map("Work")
}
 model Verified{
  id                   String            @id     @default(uuid())
  adharno              String               @unique
  adharimg             String  
  enrollmentno         String            @unique
  enrollmentimg        String
  realphoto            String
  member               Members           @relation(fields: [memberId],references: [id],onDelete: Cascade)
  memberId             String            @unique
  verified             Boolean           @default(false)
  verified_at          DateTime          @default(now())
  @@map("Verified")

 }
 model Auth {
  id                    String             @id @default(uuid())
  email                 String             @unique
  password              String
  role                  UserRole           @default(member) 
  userId                String?
  @@map("Auth")
}


model Otpverify {
  id                     String             @id     @default(uuid())
  email                  String             @unique
  otp                    String?
  password               String
  expiresAt              DateTime?          @default(now())
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  @@map("Otpverify")
}
model forgotPassword{
  id           String      @id     @default(uuid())
  email        String      @unique
  otp          String?
  expiresAt    DateTime    @default(now())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
model Network {
  id           String       @id @default(uuid())
  name         String       @unique
  verified     Boolean      @default(false)
  address      String[]
  city         String
  state        String
  country      String
  pincode      String
  website      String
  socialmedia  String[]
  about        String
  logo         String?
  cover        String?
  followers    String
  posts        Post[]
  members      Members[]     @relation("MemberNetworks") // Many-to-many relationship
  cluster      Cluster[]
  likes        Likes[]
  shares       Share[]
  comments     Comments[]  
  explore      Explore?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  @@map("Network")
}


model Cluster{
  id           String       @id @default(uuid())
  Members      Members[]    @relation("MemberClusters")
  name         String       @unique
  verified     Boolean      @default(false)
  website      String
  socialmedia  String[]
  about        String
  logo         String?
  cover        String?
  followers    Int
  posts        Post[]
  networkId    String 
  network      Network       @relation(fields: [networkId],references: [id],onDelete: Cascade)
  likes        Likes[] 
  shares       Share[]
  comments     Comments[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
 
 @@map("Cluster")
}
model Post{
  id           String         @id @default(uuid())
  description  String?
  image        String?
  video        String?
  likes        Likes[]
  comments     Comments[]
  shares       Share[]
  memberId     String
  member       Members       @relation(fields: [memberId],references: [id],onDelete: Cascade)
  networkId    String?
  network      Network ?     @relation(fields: [networkId],references: [id],onDelete: Cascade)
  clusterId    String?
  cluster      Cluster?      @relation(fields: [clusterId],references: [id],onDelete: Cascade)
  createdAt    DateTime      @default(now())
}
model Likes{
  id           String         @id @default(uuid())
  memberId     String
  member       Members        @relation(fields: [memberId],references: [id],onDelete: Cascade)
  postId       String?
  post         Post?          @relation(fields: [postId],references: [id])
  network      Network?       @relation(fields: [networkId],references: [id])
  networkId    String?
  cluster      Cluster?       @relation(fields: [clusterId],references: [id])
  clusterId    String?
  comments     Comments?      @relation(fields: [commentId],references: [id])
  commentId    String
  exploreId    String
  explore      Explore?       @relation(fields: [exploreId],references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}
model Share{
  id           String        @id @default(uuid())
  memberId     String
  member       Members       @relation(fields: [memberId],references: [id],onDelete: Cascade)
  postId       String?
  post         Post?         @relation(fields: [postId],references: [id])
  network      Network?      @relation(fields: [networkId],references: [id])
  networkId    String?
  cluster      Cluster?      @relation(fields: [clusterId],references: [id])
  clusterId    String?
  exploreId    String
  explore      Explore?      @relation(fields: [exploreId],references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}
model Comments{
  id           String        @id @default(uuid())
  content      String
  memberId     String
  likes        Likes[]
  member       Members       @relation(fields: [memberId],references: [id],onDelete: Cascade)
  postId       String?
  post         Post?         @relation(fields: [postId],references: [id],onDelete: Cascade)
  network      Network?      @relation(fields: [networkId],references: [id],onDelete: Cascade)
  networkId    String?
  cluster      Cluster?      @relation(fields: [clusterId],references: [id],onDelete: Cascade)
  clusterId    String?
  exploreId    String
  explore      Explore?      @relation(fields: [exploreId],references: [id],onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Explore{
  id            String        @id @default(uuid())
  network       Network       @relation(fields: [networkId],references: [id],onDelete: Cascade)
  networkId     String        @unique
  news          News[]
  events        Events[]
  opinion       Opinion[]
  promotion     Promotion[]
  likes         Likes[]
  comments      Comments[]
  share         Share[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  @@map("Explore")
}
  
model News{
  id           String         @id @default(uuid())
  title        String
  content      String
  image        String
  author       String
  category     Category      @default(news)
  exploreId    String        
  explore      Explore       @relation(fields: [exploreId],references: [id],onDelete: Cascade)
  memberId     String
  member       Members       @relation(fields: [memberId],references: [id], onDelete: Cascade)
  expireAt     DateTime      
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}
model Events{
  id           String        @id @default(uuid())
  title        String
  description  String
  location     String?
  startDate    DateTime?
  endDate      DateTime?
  attendees    Int?
  image        String[]
  author       String[]
  category     Category      @default(events)
  exploreId    String?
  explore      Explore?      @relation(fields: [exploreId],references: [id])
  memberId     String
  member       Members       @relation(fields: [memberId],references: [id], onDelete: Cascade)
  expireAt     DateTime 
  createdAt    DateTime      @default(now())
}
model Opinion{
  id           String        @id @default(uuid())
  title        String
  description  String
  author       String
  poll         Int[]
  rating       Int[]     
  exploreId    String?
  category     Category      @default(opinion)     
  explore      Explore?      @relation(fields: [exploreId],references: [id])
  memberId     String
  member       Members       @relation(fields: [memberId],references: [id], onDelete: Cascade)
  expireAt     DateTime 
  createdAt    DateTime      @default(now())
}

model Promotion{
  id           String        @id @default(uuid())
  title        String[]
  description  String
  image        String[]
  author       String[]
  exploreId    String?
  category     Category      @default(promotion)
  explore      Explore?      @relation(fields: [exploreId],references: [id])
  memberId     String
  member       Members       @relation(fields: [memberId],references: [id], onDelete: Cascade)
  expireAt     DateTime 
  createdAt    DateTime      @default(now())

}
model Message{
  id               String        @id @default(uuid())
  senderId         String
  receiverId       String
  file             String?
  message          String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}
model Chat{
  id               String        @id @default(uuid())
  memberId         String 
  members          Members[]     @relation("MemberChats")
  createdAt        DateTime      @default(now())
  
}
model ChatRequest {
  id        String   @id @default(uuid())
  members   Members  @relation("MemberRequests", fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String
  sender    Members  @relation("MemberChatRequest", fields: [senderId], references: [id])
  senderId  String
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole{
  admin
  member
  verfied

}
enum Gender{
  male
  female
  notdisclosed
  other
}
 enum Category{
  news
  events
  opinion
  promotion
  }


